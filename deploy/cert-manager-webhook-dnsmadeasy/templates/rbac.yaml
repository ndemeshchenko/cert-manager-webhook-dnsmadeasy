apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:secret-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:secret-reader
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
---
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
    namespace: {{ .Release.Namespace }}
---
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:auth-delegator
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
    namespace: {{ .Release.Namespace }}
---
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:domain-solver
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
rules:
  - apiGroups:
      - {{ .Values.groupName }}
    resources:
      - '*'
    verbs:
      - 'create'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:domain-solver
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:domain-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: {{ .Values.certManager.serviceAccountName }}
    namespace: {{ .Values.certManager.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:flowcontrol-solver
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
rules:
  - apiGroups:
      - "flowcontrol.apiserver.k8s.io"
    resources:
      - 'prioritylevelconfigurations'
      - 'flowschemas'
    verbs:
      - 'list'
      - 'watch'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:flowcontrol-solver
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:flowcontrol-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
    namespace: {{ .Release.Namespace | quote }}
#
# PSP
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp-privileged-cert-manager
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - extensions
  resourceNames:
  - 0privileged-cert-manager
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}:psp:privileged-cert-manager
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "cert-manager-webhook-dnsmadeasy.name" . }}
    chart: {{ include "cert-manager-webhook-dnsmadeasy.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp-privileged-cert-manager
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: {{ include "cert-manager-webhook-dnsmadeasy.fullname" . }}
    namespace: {{ .Release.Namespace }}
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
  name: 0privileged-cert-manager
spec:
  allowedCapabilities:
  - NET_BIND_SERVICE
  - ALL
  requiredDropCapabilities: []
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  allowPrivilegeEscalation: true
  fsGroup:
    rule: RunAsAny
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  - persistentVolumeClaim